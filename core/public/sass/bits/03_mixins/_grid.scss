// This is mostly from the beautiful
// ZURB Foundation 5 Grid System
// as of 9th May 2014
//
// We use 3 breakpoints, so we have 4 Device sizes:
// small     - Smartphone (portrait and landscape)
// medium    - Tablet (portrait)
// large     - small Desktop and Tablet (landscape)
// xlarge    - large Desktop
// 
// You can use media queries like this
//    @media #{$medium} {
//    	// CSS Properties for medium-devices and up
//    }
// Or like this
//    @media #{$medium-only} {
//      // CSS Properties only for medium-devices
//    }
//    
// Make an element a grid-row with the grid-row mixin
// Make an element a column with the grid-column mixin
// Everything related to grid-row and grid-column is
// documented by ZURBFoundation

@mixin grid-row($behavior: false) {

	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest {
		width: auto;
		margin-#{$default-float}: -($column-gutter/2);
		margin-#{$opposite-direction}: -($column-gutter/2);
		margin-top: 0;
		margin-bottom: 0;
		max-width: none;
	}

	// use @include grid-row(collapse); to collapsed a container row margins
	@else if $behavior == collapse {
		width: 100%;
		margin: 0;
		@media #{$medium} {
	      max-width: lower-bound($medium-range);
	    }
	    @media #{$large} {
	      max-width: lower-bound($large-range);
	    }
	    @media #{$xlarge} {
	      max-width: lower-bound($xlarge-range);
	    }
	}

	// use @include grid-row(nest-collapse); to collapse outer margins on a nested row
	@else if $behavior == nest-collapse {
		width: auto;
		margin: 0;
		max-width: none;
	}

	// use @include grid-row; to use a container row
	@else {
		width: 100%;
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		margin-top: 0;
		margin-bottom: 0;
		@media #{$medium-up} {
	      max-width: lower-bound($medium-range);
	    }
	    @media #{$large-up} {
	      max-width: lower-bound($large-range);
	    }
	    @media #{$xlarge-up} {
	      max-width: lower-bound($xlarge-range);
	    }
	}

	// Clearfix for all rows
	@include clearfix();
}

// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
@mixin grid-column(
	$columns:false,
	$last-column:false,
	$center:false,
	$offset:false,
	$push:false,
	$pull:false,
	$collapse:false,
	$float:true,
	$position:false) {

	// If positioned for default .column, include relative position
	// push and pull require position set
	@if $position or $push or $pull {
		position: relative;
	}

	// If collapsed, get rid of gutter padding
	@if $collapse {
		padding-left: 0;
		padding-right: 0;
	}

	// Gutter padding whenever a column isn't set to collapse
	// (use $collapse:null to do nothing)
	@else if $collapse == false {
		padding-left: $column-gutter / 2;
		padding-right: $column-gutter / 2;
	}

	// If a column number is given, calculate width
	@if $columns {
		width: grid-calc($columns, $total-columns);

		// If last column, float naturally instead of to the right
		@if $last-column { float: $opposite-direction; }
	}

	// Source Ordering, adds left/right depending on which you use.
	@if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
	@if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }

	@if $float {
		@if $float == left or $float == true { float: $default-float; }
		@else if $float == right { float: $opposite-direction; }
		@else { float: none; }
	}

	// If centered, get rid of float and add appropriate margins
	@if $center {
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		float: none;
	}

	// If offset, calculate appropriate margins
	@if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }

}